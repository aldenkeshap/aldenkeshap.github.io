const data|', '+', ' ', '+', '+', '+', ' ', ' ', '+', '+', '+', '+', ' ', '+', '|', '+', ' ', ' ', '+', '+', '+', '+', ' ', '+', '+', '+', ' ', ' ', '+', '+', '+', '+', ' ', '+', '+', '+', ' ', ' ', '+', '+', '|', '+', ' ', '+', '+', '+', ' ', ' ', '+', '|', '||', '+', '+', '|', '+', '+', '+', ' ', ' ', '+', '|', '+', '+', '|', '+', '|', '+', ' ', ' ', '+', '+', '|', '+', '|', '+', '+', '+', ' ', ' ', '+', '+', '+', '+', '+', '+', '||', '+', '+', '+', ' ', ' ', '-', ' ', ' ', '+', '+', '+', '+', '+', ' ', ' ', '+', ' ', ' ', '+', '|', '+', '+', '+', ' ', ' ', '+', ' ', ' ', '+', '+', '+', '+', '+', ' ', ' ', '+', ' ', ' ', '+', '+', '+', '+', '+', ' ', ' ', '-', ' ', ' ', '+', '||', '|', '+', '+', ' ', ' ', '+', '+', '+', '+', '|', '+', '+', '+', ' ', ' ', '+', '+', '+', '+', '|', '+', '+', '+', ' ', ' ', '+', '+', '+', '+', '+', '|', '+', '+', ' ', ' ', '+', '|', '|', '+', '|', '|', '+', '+', ' ', ' ', '+', '+', '|', '+', '|
const scene = new THREE.Scene();
const renderer = new THREE.WebGLRenderer({
    antialias: true,
});
renderer.shadowMap.enabled = true;
renderer.shadowMap.type = THREE.PCFSoftShadowMap;

renderer.setSize(window.innerWidth * 0.75, window.innerHeight * 0.75);
document.body.appendChild(renderer.domElement);
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);

const controls = new THREE.OrbitControls(camera, renderer.domElement);

controls.update();

const groundMat = new THREE.MeshLambertMaterial({ color: 0x00ff00 });
const wallMat = new THREE.MeshLambertMaterial({ color: 0x555555 });
const windowMat = new THREE.MeshLambertMaterial({ color: 0x0000ff });

const xBar = new THREE.BoxGeometry(1, 0.2, 0.2);
const yBar = new THREE.BoxGeometry(0.2, 1, 0.2);
const zBar = new THREE.BoxGeometry(0.2, 0.2, 1);

const horizontalGeo = THREE.BufferGeometryUtils.mergeBufferGeometries([xBar, yBar]);
const verticalGeo = THREE.BufferGeometryUtils.mergeBufferGeometries([zBar, yBar]);;

const boxGeo = new THREE.BoxGeometry(1, 1, 1);

let material;
let geometry;
for (let x = 0; x < 10; x++) {
    for (let y = 0; y < 10; y++) {
        for (let z = 0; z < 10; z++) {
            let t = data[100 * x + 10 * y + z];
            if (t === ' ') {
                continue;
            } else if (t === '-') {
                material = windowMat;
                geometry = horizontalGeo;
            } else if (t === '|') {
                material = windowMat;
                geometry = verticalGeo;
            } else if (t === '+') {
                material = wallMat;
                geometry = boxGeo;
            } else if (t === '#') {
                material = groundMat;
                geometry = boxGeo;
            }
            
            let cube = new THREE.Mesh(geometry, material);
            cube.castShadow = true;
            cube.receiveShadow = true;
            scene.add(cube);
            cube.position.set(x - 5, y, z - 5);
        }
    }
}

const light = new THREE.PointLight(0xffffff, 1, 0);
light.position.set(0, 50, 0);
light.castShadow = true;
scene.add(light);

light.shadow.mapSize.width = window.innerWidth * 0.75;
light.shadow.mapSize.height = window.innerHeight * 0.75;

const ambient = new THREE.AmbientLight(0xffffff, 0.5);
scene.add(ambient);

camera.position.y = 50;

controls.update();

function animate() {
    requestAnimationFrame( animate );
    renderer.render( scene, camera );
}
animate();
